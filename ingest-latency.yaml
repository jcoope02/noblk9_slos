- apiVersion: n9/v1alpha
  kind: SLO
  metadata:
    displayName: password-reset-success-rate
    name: password-reset-success-rate
    project: default
  spec:
    alertPolicies: []
    budgetingMethod: Occurrences
    description: ""
    indicator:
      metricSource:
        name: globacount-prom
        project: default
    objectives:
    - countMetrics:
        good:
          prometheus:
            promql: password_reset_complete{code="ALL",service="pwr"}
        incremental: true
        total:
          prometheus:
            promql: password_reset_initiate{code="ALL",service="pwr"}
      displayName: Working
      tag: default.password-reset-success-rate.1d000000
      target: 0.8
      value: 1
    service: journey-password-reset
    timeWindows:
    - count: 2
      isRolling: true
      period:
        begin: "2021-01-26T19:39:10Z"
        end: "2021-01-26T21:39:10Z"
      unit: Hour
- apiVersion: n9/v1alpha
  kind: SLO
  metadata:
    displayName: intake-availability
    name: intake-availability
    project: default
  spec:
    alertPolicies: []
    budgetingMethod: Occurrences
    description: ""
    indicator:
      metricSource:
        name: n9-datadog
        project: default
    objectives:
    - countMetrics:
        good:
          datadog:
            query: avg:trace.http.request.hits.by_http_status{service:intake,!http.status_class:5xx}.as_count()
        incremental: false
        total:
          datadog:
            query: avg:trace.http.request.hits.by_http_status{service:intake}.as_count()
      displayName: Acceptable
      tag: default.intake-availability.1d000000
      target: 0.999
      value: 1
    service: nobl9-intake
    timeWindows:
    - count: 2
      isRolling: true
      period:
        begin: "2021-01-26T19:39:10Z"
        end: "2021-01-26T21:39:10Z"
      unit: Hour
- apiVersion: n9/v1alpha
  kind: SLO
  metadata:
    displayName: ingest-availability
    name: ingest-availability
    project: default
  spec:
    alertPolicies: []
    budgetingMethod: Occurrences
    description: ""
    indicator:
      metricSource:
        name: n9-datadog
        project: default
    objectives:
    - countMetrics:
        good:
          datadog:
            query: avg:trace.http.request.hits.by_http_status{service:ingest,!http.status_class:5xx}.as_count()
        incremental: false
        total:
          datadog:
            query: avg:trace.http.request.hits.by_http_status{service:ingest}.as_count()
      displayName: Acceptable
      tag: default.ingest-availability.1d000000
      target: 0.999
      value: 1
    service: nobl9-ingest
    timeWindows:
    - count: 2
      isRolling: true
      period:
        begin: "2021-01-26T19:39:10Z"
        end: "2021-01-26T21:39:10Z"
      unit: Hour
- apiVersion: n9/v1alpha
  kind: SLO
  metadata:
    displayName: intake-latency
    name: intake-latency
    project: default
  spec:
    alertPolicies: []
    budgetingMethod: Occurrences
    description: ""
    indicator:
      metricSource:
        name: n9-datadog
        project: default
      rawMetric:
        datadog:
          query: avg:trace.http.request.duration{service:intake,cluster_name:pre-release}
    objectives:
    - displayName: Okay
      op: lt
      tag: default.intake-latency.0d120000
      target: 0.8
      value: 0.12
    - displayName: Laggy
      op: lt
      tag: default.intake-latency.0d200000
      target: 0.95
      value: 0.2
    - displayName: Slow
      op: lt
      tag: default.intake-latency.0d500000
      target: 0.99
      value: 0.5
    service: nobl9-intake
    timeWindows:
    - count: 1
      isRolling: true
      period:
        begin: "2021-01-25T21:39:10Z"
        end: "2021-01-26T21:39:10Z"
      unit: Day
- apiVersion: n9/v1alpha
  kind: SLO
  metadata:
    displayName: example-1
    name: example-1
    project: default
  spec:
    alertPolicies:
    - example-alert-policy8
    budgetingMethod: Occurrences
    description: ""
    indicator:
      metricSource:
        name: globacount-prom
        project: default
      rawMetric:
        prometheus:
          promql: latency_west_c7{code="ALL",instance="localhost:3000",job="prometheus",service="globacount"}
    objectives:
    - displayName: Laggy
      op: lt
      tag: default.example-1.100d000000
      target: 0.99
      value: 100
    - displayName: Slowish
      op: lt
      tag: default.example-1.200d000000
      target: 0.995
      value: 200
    - displayName: Painful
      op: lt
      tag: default.example-1.1000d000000
      target: 0.9995
      value: 1000
    service: sample-service
    timeWindows:
    - count: 2
      isRolling: true
      period:
        begin: "2021-01-26T19:39:10Z"
        end: "2021-01-26T21:39:10Z"
      unit: Hour
- apiVersion: n9/v1alpha
  kind: SLO
  metadata:
    displayName: ingest-latency
    name: ingest-latency
    project: default
  spec:
    alertPolicies: []
    budgetingMethod: Occurrences
    description: ""
    indicator:
      metricSource:
        name: n9-datadog
        project: default
      rawMetric:
        datadog:
          query: avg:trace.http.request.duration{service:ingest}
    objectives:
    - displayName: Laggy
      op: lt
      tag: default.ingest-latency.200d000000
      target: 0.99
      value: 200
    - displayName: Slow
      op: lt
      tag: default.ingest-latency.600d000000
      target: 0.9995
      value: 600
    service: nobl9-ingest
    timeWindows:
    - count: 2
      isRolling: true
      period:
        begin: "2021-01-26T19:39:10Z"
        end: "2021-01-26T21:39:10Z"
      unit: Hour
- apiVersion: n9/v1alpha
  kind: SLO
  metadata:
    displayName: api-request-south-korea
    name: api-request-south-korea
    project: default
  spec:
    alertPolicies: []
    budgetingMethod: Occurrences
    description: ""
    indicator:
      metricSource:
        name: n9-newrelic-cooper
        project: default
      rawMetric:
        newRelic:
          nrql: 'SELECT average(duration) FROM SyntheticCheck WHERE monitorName=''API
            Sample'' AND locationLabel=''Seoul, KR'' TIMESERIES '
    objectives:
    - displayName: laggy
      op: lt
      tag: default.api-request-south-korea.500d000000
      target: 0.99
      value: 500
    service: zcoopernewrelic
    timeWindows:
    - count: 1
      isRolling: true
      period:
        begin: "2021-01-25T21:39:10Z"
        end: "2021-01-26T21:39:10Z"
      unit: Day
- apiVersion: n9/v1alpha
  kind: SLO
  metadata:
    displayName: api-request-paris
    name: api-request-paris
    project: default
  spec:
    alertPolicies: []
    budgetingMethod: Occurrences
    description: ""
    indicator:
      metricSource:
        name: n9-newrelic-cooper
        project: default
      rawMetric:
        newRelic:
          nrql: 'SELECT average(duration) FROM SyntheticCheck WHERE monitorName=''API
            Sample'' AND locationLabel=''Paris, FR'' TIMESERIES '
    objectives:
    - displayName: ""
      op: lt
      tag: default.api-request-paris.300d000000
      target: 0.99
      value: 300
    service: zcoopernewrelic
    timeWindows:
    - count: 1
      isRolling: true
      period:
        begin: "2021-01-25T21:39:10Z"
        end: "2021-01-26T21:39:10Z"
      unit: Day
- apiVersion: n9/v1alpha
  kind: SLO
  metadata:
    displayName: api-request-san-francisco
    name: api-request-san-francisco
    project: default
  spec:
    alertPolicies: []
    budgetingMethod: Occurrences
    description: ""
    indicator:
      metricSource:
        name: n9-newrelic-cooper
        project: default
      rawMetric:
        newRelic:
          nrql: 'SELECT average(duration) FROM SyntheticCheck WHERE monitorName=''API
            Sample'' AND locationLabel=''San Francisco, CA, USA'' TIMESERIES '
    objectives:
    - displayName: laggy
      op: lt
      tag: default.api-request-san-francisco.200d000000
      target: 0.99
      value: 200
    service: zcoopernewrelic
    timeWindows:
    - count: 1
      isRolling: true
      period:
        begin: "2021-01-25T21:39:10Z"
        end: "2021-01-26T21:39:10Z"
      unit: Day
